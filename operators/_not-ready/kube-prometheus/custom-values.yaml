alertmanager:
  alertmanagerSpec:
      storage: 
        volumeClaimTemplate:
          spec:
            storageClassName: gp2
            accessModes: ["ReadWriteOnce"]
            resources:
                requests:
                  storage: 10Gi
  config:
    global:
      slack_api_url: "https://hooks.slack.com/services/{slack_token}"
    inhibit_rules:
      - source_matchers:
          - 'severity = critical'
        target_matchers:
          - 'severity =~ warning|info'
        equal:
          - 'namespace'
          - 'alertname'
      - source_matchers:
          - 'severity = warning'
        target_matchers:
          - 'severity = info'
        equal:
          - 'namespace'
          - 'alertname'
      - source_matchers:
          - 'alertname = InfoInhibitor'
        target_matchers:
          - 'severity = info'
        equal:
          - 'namespace'
    route:
      group_by: ['namespace']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
      - receiver: 'slack'
        matchers:
          - alertname =~ "InfoInhibitor|Watchdog"
    receivers:
    - name: 'slack'
      slack_configs:
      - channel: '#{slack_channel}'
        send_resolved: true
        title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
        text: >-
          {{ range .Alerts }}
            *{{ .Annotations.description }}*
            *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}

prometheus:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/ssl-passthrough: 'false'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    hosts:
      - prometheus.guilhermefreis.com
    tls: 
    - secretName: certificado-tls
      hosts:
      - prometheus.guilhermefreis.com
  prometheusSpec:
    additionalScrapeConfigs:
      - job_name: kubecost
        honor_labels: true
        scrape_interval: 1m
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: http
        dns_sd_configs:
        - names:
          - kubecost-cost-analyzer.kubecost
          type: 'A'
          port: 9003
    storageSpec: 
     volumeClaimTemplate:
       spec:
         storageClassName: gp2
         accessModes: ["ReadWriteOnce"]
         resources:
           requests:
             storage: 10Gi

grafana:
  defaultDashboardsTimezone: America/Sao_Paulo
  adminPassword: poc-grafana
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/ssl-passthrough: 'false'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    hosts:
      - grafana.guilhermefreis.com
    tls: 
    - secretName: certificado-tls
      hosts:
      - grafana.guilhermefreis.com
  grafana.ini:
    users:
      viewers_can_edit: false
    auth:
      disable_login_form: false
      disable_signout_menu: false
    auth.anonymous:
      enabled: true
      org_role: Viewer
  additionalDatasources:
    - name: Loki
      type: loki
      isDefault: false
      access: proxy
      url: http://loki.monitoring.svc.cluster.local:3100
      version: 1
      orgId: 1
    - name: Tempo
      type: tempo
      isDefault: false
      basicAuth: false
      access: proxy
      url: http://tempo.monitoring.svc.cluster.local:3100
      version: 1
      orgId: 1
      apiVersion: 1
      uid: tempo

defaultRules:
  create: true
  rules:
    kubeControllerManager: false
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false
#     alertmanager: true
#     etcd: false
#     configReloaders: true
#     general: false
#     k8s: true
#     kubeApiserverAvailability: false
#     kubeApiserverBurnrate: false
#     kubeApiserverHistogram: false
#     kubeApiserverSlos: false
#     kubelet: true
#     kubeProxy: false
#     kubePrometheusGeneral: true
#     kubePrometheusNodeRecording: true
#     kubernetesApps: true
#     kubernetesResources: true
#     kubernetesStorage: true
#     kubernetesSystem: true
#     kubeStateMetrics: true
#     network: true
#     node: true
#     nodeExporterAlerting: true
#     nodeExporterRecording: true
#     prometheus: true
#     prometheusOperator: false
#     windows: false

# coreDns:
#   enabled: false