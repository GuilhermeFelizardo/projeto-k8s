alertmanager:
  alertmanagerSpec:
      storage: 
        volumeClaimTemplate:
          spec:
            storageClassName: gp3
            accessModes: ["ReadWriteOnce"]
            resources:
                requests:
                  storage: 10Gi
  # config:
  #   global:
  #     slack_api_url: "https://hooks.slack.com/services/{slack_token}"
  #   inhibit_rules:
  #     - source_matchers:
  #         - 'severity = critical'
  #       target_matchers:
  #         - 'severity =~ warning|info'
  #       equal:
  #         - 'namespace'
  #         - 'alertname'
  #     - source_matchers:
  #         - 'severity = warning'
  #       target_matchers:
  #         - 'severity = info'
  #       equal:
  #         - 'namespace'
  #         - 'alertname'
  #     - source_matchers:
  #         - 'alertname = InfoInhibitor'
  #       target_matchers:
  #         - 'severity = info'
  #       equal:
  #         - 'namespace'
  #   route:
  #     group_by: ['namespace']
  #     group_wait: 30s
  #     group_interval: 5m
  #     repeat_interval: 12h
  #     receiver: 'slack'
  #     routes:
  #     - receiver: 'slack'
  #       matchers:
  #         - alertname =~ "InfoInhibitor|Watchdog"
  #   receivers:
  #   - name: 'slack'
  #     slack_configs:
  #     - channel: '#{slack_channel}'
  #       send_resolved: true
  #       title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
  #       text: >-
  #         {{ range .Alerts }}
  #           *{{ .Annotations.description }}*
  #           *Details:*
  #           {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
  #           {{ end }}
  #         {{ end }}

prometheus:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/ssl-passthrough: 'false'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    hosts:
      - prometheus.guilhermefreis.com
    tls: 
    - secretName: certificate-tls
      hosts:
      - prometheus.guilhermefreis.com
  prometheusSpec:
    additionalScrapeConfigs:
      - job_name: kubecost
        honor_labels: true
        scrape_interval: 1m
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: http
        dns_sd_configs:
        - names:
          - kubecost-cost-analyzer.kubecost
          type: 'A'
          port: 9003
    storageSpec: 
     volumeClaimTemplate:
       spec:
         storageClassName: gp3
         accessModes: ["ReadWriteOnce"]
         resources:
           requests:
             storage: 10Gi

grafana:
  image:
    tag: 8.4.2 # AT THIS MOMENT, LOKI AND GRAFANA INTEGRATION ONLY WORKS WITH TAG 8.4.2
  defaultDashboardsTimezone: America/Sao_Paulo
  adminPassword: poc-grafana
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/ssl-passthrough: 'false'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    hosts:
      - grafana.guilhermefreis.com
    tls: 
    - secretName: certificate-tls
      hosts:
      - grafana.guilhermefreis.com
  grafana.ini:
    users:
      viewers_can_edit: false
    auth:
      disable_login_form: false
      disable_signout_menu: false
    auth.anonymous:
      enabled: true
      org_role: Viewer
  additionalDataSources:
    # - name: Loki
    #   type: loki
    #   isDefault: false
    #   access: proxy
    #   url: http://loki:3100
    #   version: 1
    #   orgId: 1
    - name: Tempo
      type: tempo
      isDefault: false
      basicAuth: false
      access: proxy
      url: http://tempo:3100
      version: 1
      orgId: 1

defaultRules:
  create: true
  rules:
    kubeControllerManager: false
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false
